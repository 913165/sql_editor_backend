// hooks/useAIConfig.js
import { useState, useEffect } from 'react';

export const useAIConfig = () => {
    const [config, setConfig] = useState({
        provider: 'openai',
        apiKey: '',
        model: 'gpt-4',
        temperature: 0.3,
        maxTokens: 500,
        enabled: false
    });

    // Load config from localStorage on mount
    useEffect(() => {
        try {
            const savedConfig = localStorage.getItem('sql-editor-ai-config');
            if (savedConfig) {
                const parsedConfig = JSON.parse(savedConfig);
                console.log('Loaded AI config from localStorage:', parsedConfig);
                setConfig(parsedConfig);
            } else {
                console.log('No AI config found in localStorage');
            }
        } catch (error) {
            console.error('Failed to load AI config:', error);
        }
    }, []);

    // Save config to localStorage
    const saveConfig = (newConfig) => {
        try {
            // Ensure the config is enabled when saving
            const updatedConfig = {
                ...config,
                ...newConfig,
                enabled: true // Always enable when saving from modal
            };

            console.log('Saving AI config:', updatedConfig);
            setConfig(updatedConfig);
            localStorage.setItem('sql-editor-ai-config', JSON.stringify(updatedConfig));
            console.log('AI config saved successfully');
        } catch (error) {
            console.error('Failed to save AI config:', error);
        }
    };

    // Generate SQL using configured AI
    const generateSQL = async (description, schemas, databaseType) => {
        if (!config.enabled || !config.apiKey) {
            throw new Error('AI is not configured. Please set up your API key first.');
        }

        const prompt = createSQLPrompt(description, schemas, databaseType);

        if (config.provider === 'openai') {
            return await generateWithOpenAI(prompt, config);
        } else if (config.provider === 'claude') {
            return await generateWithClaude(prompt, config);
        } else {
            throw new Error('Unsupported AI provider');
        }
    };

    // Check if AI is properly configured
    const isConfigured = config.enabled && config.apiKey && config.apiKey.trim().length > 0;

    console.log('Current AI config state:', { config, isConfigured });

    return {
        config,
        saveConfig,
        generateSQL,
        isConfigured
    };
};

// Helper function to create SQL generation prompt
const createSQLPrompt = (description, schemas, databaseType) => {
    const schemaText = schemas.map(table =>
        `Table: ${table.tableName}\nColumns: ${table.columns}`
    ).join('\n\n');

    return `You are an expert SQL query generator. Generate a ${databaseType || 'SQL'} query based on the following:

Description: ${description}

Available Database Schema:
${schemaText}

Requirements:
- Generate only the SQL query, no explanations
- Use proper ${databaseType || 'SQL'} syntax
- Include comments if the query is complex
- Ensure the query is safe and follows best practices

SQL Query:`;
};

// OpenAI API integration
const generateWithOpenAI = async (prompt, config) => {
    console.log('Generating SQL with OpenAI:', { model: config.model });

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${config.apiKey}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: config.model,
            messages: [
                {
                    role: 'system',
                    content: 'You are an expert SQL developer. Generate clean, efficient SQL queries based on user descriptions. Return only the SQL query without explanations.'
                },
                {
                    role: 'user',
                    content: prompt
                }
            ],
            max_tokens: config.maxTokens,
            temperature: config.temperature
        })
    });

    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error?.message || 'Failed to generate SQL with OpenAI');
    }

    const data = await response.json();
    const generatedSQL = data.choices[0]?.message?.content?.trim();

    if (!generatedSQL) {
        throw new Error('No SQL generated by AI');
    }

    console.log('Generated SQL:', generatedSQL);
    return generatedSQL;
};

// Claude API integration (if you want to support it)
const generateWithClaude = async (prompt, config) => {
    console.log('Generating SQL with Claude:', { model: config.model });

    const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
            'x-api-key': config.apiKey,
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01'
        },
        body: JSON.stringify({
            model: config.model,
            max_tokens: config.maxTokens,
            temperature: config.temperature,
            messages: [
                {
                    role: 'user',
                    content: prompt
                }
            ]
        })
    });

    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error?.message || 'Failed to generate SQL with Claude');
    }

    const data = await response.json();
    const generatedSQL = data.content[0]?.text?.trim();

    if (!generatedSQL) {
        throw new Error('No SQL generated by AI');
    }

    console.log('Generated SQL:', generatedSQL);
    return generatedSQL;
};